name: release

on:
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write # For uploading built package to GitHub release
    env:
      PYTHON_VERSION: 3.13
      POETRY_VERSION: 2.0.1

    steps:
      - uses: actions/checkout@v4

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | POETRY_HOME="$HOME/.poetry" python - --yes
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - name: Assert GitHub Release tag matches the library version
        run: |
          library_version=$(poetry version -s)

          if [ "$library_version" != "$GITHUB_RELEASE_TAG" ]; then
              echo "❌ Release tag ($GITHUB_RELEASE_TAG) does not match the library version in pyproject.toml ($library_version)."
              exit 1
          fi

          echo "✅ Release tag matches the library version in pyproject.toml ($library_version)"
        env:
          GITHUB_RELEASE_TAG: ${{ github.event.release.tag_name }}

      - name: Install dependencies
        run: poetry install --no-interaction --with dev

      - name: Run tests
        run: pytest

      - name: Build package
        run: poetry build

      - name: Upload package to GitHub release
        run: gh release upload "${GITHUB_RELEASE_TAG}" dist/*.{tar.gz,whl}
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_RELEASE_TAG: ${{ github.event.release.tag_name }}

      - name: Publish package to PyPI
        run: |
          echo "Publishing package to PyPI..."

          # After verifying the release tag and running code linters, tests, and builds,
          # as a last step, we can publish the package to PyPI.

          # See https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
